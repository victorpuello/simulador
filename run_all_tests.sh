#!/bin/bash

# Script principal para ejecutar todos los tests del proyecto

set -e

echo "üöÄ Iniciando testing completo del Simulador Saber 11..."
echo "=================================================="

# Funci√≥n para mostrar el tiempo transcurrido
show_duration() {
    local start_time=$1
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    local hours=$((duration / 3600))
    local minutes=$(((duration % 3600) / 60))
    local seconds=$((duration % 60))
    
    if [ $hours -gt 0 ]; then
        echo "‚è±Ô∏è  Tiempo transcurrido: ${hours}h ${minutes}m ${seconds}s"
    elif [ $minutes -gt 0 ]; then
        echo "‚è±Ô∏è  Tiempo transcurrido: ${minutes}m ${seconds}s"
    else
        echo "‚è±Ô∏è  Tiempo transcurrido: ${seconds}s"
    fi
}

# Funci√≥n para mostrar progreso
show_progress() {
    echo ""
    echo "üìç $1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
}

# Variables globales
SCRIPT_START_TIME=$(date +%s)
BACKEND_PASSED=false
FRONTEND_PASSED=false
INTEGRATION_PASSED=false

# Crear directorios para reportes
mkdir -p reports/{backend,frontend,integration}

show_progress "Verificando prerrequisitos..."

# Verificar que Python est√° disponible
if ! command -v python &> /dev/null; then
    echo "‚ùå Python no est√° instalado o no est√° en el PATH"
    exit 1
fi

# Verificar que Node.js est√° disponible
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js no est√° instalado o no est√° en el PATH"
    exit 1
fi

# Verificar que los directorios existen
if [ ! -d "backend" ]; then
    echo "‚ùå Directorio backend no encontrado"
    exit 1
fi

if [ ! -d "frontend" ]; then
    echo "‚ùå Directorio frontend no encontrado"
    exit 1
fi

echo "‚úÖ Prerrequisitos verificados"

# ===============================================
# BACKEND TESTS
# ===============================================
show_progress "Ejecutando tests del backend..."

cd backend

if [ -f "venv/bin/activate" ]; then
    echo "üêç Activando entorno virtual..."
    source venv/bin/activate
else
    echo "‚ö†Ô∏è  No se encontr√≥ entorno virtual, usando Python global"
fi

# Instalar dependencias si es necesario
if [ ! -f ".deps_installed" ]; then
    echo "üì¶ Instalando dependencias del backend..."
    pip install -r requirements.txt
    touch .deps_installed
fi

echo "üß™ Ejecutando tests del backend con coverage..."

# Ejecutar tests del backend
if python -m pytest \
    --verbose \
    --cov=apps \
    --cov-report=html:../reports/backend/htmlcov \
    --cov-report=term-missing \
    --cov-report=xml:../reports/backend/coverage.xml \
    --cov-fail-under=70 \
    --durations=10 \
    --tb=short \
    --junitxml=../reports/backend/junit.xml \
    2>&1 | tee ../reports/backend/test_output.log; then
    
    echo "‚úÖ Tests del backend completados exitosamente"
    BACKEND_PASSED=true
else
    echo "‚ùå Tests del backend fallaron"
    BACKEND_PASSED=false
fi

# Generar reporte de coverage
python -m coverage report --show-missing > ../reports/backend/coverage_summary.txt

cd ..

# ===============================================
# FRONTEND TESTS
# ===============================================
show_progress "Ejecutando tests del frontend..."

cd frontend

# Instalar dependencias si es necesario
if [ ! -d "node_modules" ] || [ ! -f ".deps_installed" ]; then
    echo "üì¶ Instalando dependencias del frontend..."
    npm ci
    touch .deps_installed
fi

echo "üß™ Ejecutando tests del frontend con coverage..."

# Ejecutar tests del frontend
if npm run test:coverage 2>&1 | tee ../reports/frontend/test_output.log; then
    echo "‚úÖ Tests del frontend completados exitosamente"
    FRONTEND_PASSED=true
    
    # Mover reportes de coverage
    if [ -d "coverage" ]; then
        cp -r coverage ../reports/frontend/
    fi
else
    echo "‚ùå Tests del frontend fallaron"
    FRONTEND_PASSED=false
fi

cd ..

# ===============================================
# INTEGRATION TESTS
# ===============================================
show_progress "Ejecutando tests de integraci√≥n..."

cd backend

echo "üîó Ejecutando tests de integraci√≥n end-to-end..."

# Ejecutar solo tests de integraci√≥n
if python -m pytest tests/ \
    -m integration \
    --verbose \
    --tb=short \
    --junitxml=../reports/integration/junit.xml \
    2>&1 | tee ../reports/integration/test_output.log; then
    
    echo "‚úÖ Tests de integraci√≥n completados exitosamente"
    INTEGRATION_PASSED=true
else
    echo "‚ùå Tests de integraci√≥n fallaron"
    INTEGRATION_PASSED=false
fi

cd ..

# ===============================================
# LINTING Y CALIDAD DE C√ìDIGO
# ===============================================
show_progress "Ejecutando an√°lisis de calidad de c√≥digo..."

echo "üîç Analizando c√≥digo del backend..."
cd backend

# Ejecutar linting del backend
{
    echo "=== BLACK ===" > ../reports/backend/linting.log
    black --check . >> ../reports/backend/linting.log 2>&1 || echo "Black: Issues found"
    
    echo -e "\n=== FLAKE8 ===" >> ../reports/backend/linting.log
    flake8 . >> ../reports/backend/linting.log 2>&1 || echo "Flake8: Issues found"
    
    echo -e "\n=== ISORT ===" >> ../reports/backend/linting.log
    isort --check-only . >> ../reports/backend/linting.log 2>&1 || echo "Isort: Issues found"
} || true

cd ..

echo "üîç Analizando c√≥digo del frontend..."
cd frontend

# Ejecutar linting del frontend
{
    echo "=== ESLINT ===" > ../reports/frontend/linting.log
    npm run lint >> ../reports/frontend/linting.log 2>&1 || echo "ESLint: Issues found"
    
    echo -e "\n=== TYPESCRIPT ===" >> ../reports/frontend/linting.log
    npx tsc --noEmit >> ../reports/frontend/linting.log 2>&1 || echo "TypeScript: Issues found"
} || true

cd ..

# ===============================================
# GENERACI√ìN DE REPORTE FINAL
# ===============================================
show_progress "Generando reporte final..."

cat > reports/test_summary.md << EOF
# üìä Reporte de Testing - Simulador Saber 11

**Fecha:** $(date '+%Y-%m-%d %H:%M:%S')  
**Duraci√≥n total:** $(show_duration $SCRIPT_START_TIME)

## üß™ Resultados de Tests

| Componente | Estado | Coverage | Detalles |
|------------|--------|----------|----------|
| Backend | $([ "$BACKEND_PASSED" = true ] && echo "‚úÖ PASS" || echo "‚ùå FAIL") | Ver reporte | [Logs](backend/test_output.log) |
| Frontend | $([ "$FRONTEND_PASSED" = true ] && echo "‚úÖ PASS" || echo "‚ùå FAIL") | Ver reporte | [Logs](frontend/test_output.log) |
| Integraci√≥n | $([ "$INTEGRATION_PASSED" = true ] && echo "‚úÖ PASS" || echo "‚ùå FAIL") | N/A | [Logs](integration/test_output.log) |

## üìà Coverage Reports

- **Backend**: [HTML Report](backend/htmlcov/index.html) | [XML Report](backend/coverage.xml)
- **Frontend**: [HTML Report](frontend/coverage/index.html) | [LCOV Report](frontend/coverage/lcov.info)

## üîç Code Quality

- **Backend Linting**: [Report](backend/linting.log)
- **Frontend Linting**: [Report](frontend/linting.log)

## üìÅ Estructura de Reportes

\`\`\`
reports/
‚îú‚îÄ‚îÄ backend/
‚îÇ   ‚îú‚îÄ‚îÄ htmlcov/          # Coverage HTML
‚îÇ   ‚îú‚îÄ‚îÄ coverage.xml      # Coverage XML
‚îÇ   ‚îú‚îÄ‚îÄ junit.xml         # JUnit test results
‚îÇ   ‚îú‚îÄ‚îÄ test_output.log   # Test execution log
‚îÇ   ‚îú‚îÄ‚îÄ coverage_summary.txt
‚îÇ   ‚îî‚îÄ‚îÄ linting.log       # Linting results
‚îú‚îÄ‚îÄ frontend/
‚îÇ   ‚îú‚îÄ‚îÄ coverage/         # Coverage reports
‚îÇ   ‚îú‚îÄ‚îÄ test_output.log   # Test execution log
‚îÇ   ‚îî‚îÄ‚îÄ linting.log       # Linting results
‚îú‚îÄ‚îÄ integration/
‚îÇ   ‚îú‚îÄ‚îÄ junit.xml         # Integration test results
‚îÇ   ‚îî‚îÄ‚îÄ test_output.log   # Integration test log
‚îî‚îÄ‚îÄ test_summary.md       # Este reporte
\`\`\`

## üéØ Resumen Ejecutivo

$([ "$BACKEND_PASSED" = true ] && [ "$FRONTEND_PASSED" = true ] && [ "$INTEGRATION_PASSED" = true ] && echo "üéâ **TODOS LOS TESTS PASARON EXITOSAMENTE**" || echo "‚ö†Ô∏è **ALGUNOS TESTS FALLARON - REVISAR LOGS**")

**Pr√≥ximos pasos:**
- Revisar logs de tests fallidos
- Verificar coverage de c√≥digo
- Ejecutar tests manualmente si es necesario
- Actualizar documentaci√≥n de testing

---
*Generado autom√°ticamente por run_all_tests.sh*
EOF

# ===============================================
# RESUMEN FINAL
# ===============================================

echo ""
echo "=================================================="
echo "üèÅ RESUMEN FINAL DE TESTING"
echo "=================================================="

echo "üìä Resultados:"
echo "  Backend:     $([ "$BACKEND_PASSED" = true ] && echo "‚úÖ PASS" || echo "‚ùå FAIL")"
echo "  Frontend:    $([ "$FRONTEND_PASSED" = true ] && echo "‚úÖ PASS" || echo "‚ùå FAIL")"
echo "  Integraci√≥n: $([ "$INTEGRATION_PASSED" = true ] && echo "‚úÖ PASS" || echo "‚ùå FAIL")"

echo ""
show_duration $SCRIPT_START_TIME

echo ""
echo "üìÅ Reportes generados en: ./reports/"
echo "üìã Resumen completo en: ./reports/test_summary.md"

# Abrir reporte en navegador si est√° disponible
if command -v xdg-open &> /dev/null; then
    echo "üåê Abriendo reporte de coverage del backend..."
    xdg-open reports/backend/htmlcov/index.html &> /dev/null &
elif command -v open &> /dev/null; then
    echo "üåê Abriendo reporte de coverage del backend..."
    open reports/backend/htmlcov/index.html &> /dev/null &
fi

# C√≥digo de salida
if [ "$BACKEND_PASSED" = true ] && [ "$FRONTEND_PASSED" = true ] && [ "$INTEGRATION_PASSED" = true ]; then
    echo ""
    echo "üéâ Todos los tests completados exitosamente!"
    exit 0
else
    echo ""
    echo "‚ö†Ô∏è  Algunos tests fallaron. Revisar logs para m√°s detalles."
    exit 1
fi